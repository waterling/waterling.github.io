{"version":3,"sources":["components/Background/Background.jsx","components/SocialLinks/SocialLinks.jsx","components/FlipButton/FlipButton.jsx","App.js","serviceWorker.js","index.js"],"names":["Background","renderTextElements","text","times","arguments","length","undefined","listOfText","i","push","react_default","a","createElement","className","key","this","PureComponent","SocialLinks","SOCIALS","name","link","renderButton","social","href","concat","aria-hidden","map","FlipButton","target","rel","Component","App","components_Background_Background","components_SocialLinks_SocialLinks","components_FlipButton_FlipButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTA0BeA,0NArBXC,mBAAqB,SAACC,GAElB,IAFqC,IAAbC,EAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACxBG,EAAa,GACVC,EAAI,EAAGA,EAAIL,EAAOK,IACvBD,EAAWE,KACPC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAKN,GACtBN,IAIb,OAAOK,2EAIP,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVE,KAAKd,mBAAmB,aAAc,YAhB9Be,kBC6CVC,oNA5CXC,QAAU,CACN,CACIC,KAAM,WACNC,KAAM,mCAEV,CACID,KAAM,KACNC,KAAM,gCAEV,CACID,KAAM,YACNC,KAAM,0CAEV,CACID,KAAM,UACNC,KAAM,+DAEV,CACID,KAAM,UACNC,KAAM,sCAIdC,aAAe,SAACC,GACZ,OACIZ,EAAAC,EAAAC,cAAA,MAAIC,UAAWS,EAAOH,KAAML,IAAKQ,EAAOH,MACpCT,EAAAC,EAAAC,cAAA,KAAGW,KAAMD,EAAOF,MACZV,EAAAC,EAAAC,cAAA,KAAGC,UAAS,SAAAW,OAAWF,EAAOH,KAAlB,UAAgCM,cAAY,oFAOpE,OACIf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,UACKG,KAAKG,QAAQQ,IAAIX,KAAKM,uBAtCjBL,kBCaXW,0LAZP,OACIjB,EAAAC,EAAAC,cAAA,KACIgB,OAAO,SACPL,KAAK,oMACLM,IAAI,uBAEJnB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAlB,kCARSiB,cCoBVC,mLAfP,OACIrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,OAEJxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,0BATEiB,aCMEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ca3945e5.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\nimport './Background.scss';\r\n\r\nclass Background extends PureComponent {\r\n    renderTextElements = (text, times=40) => {\r\n        const listOfText = [];\r\n        for (let i = 0; i < times; i++) {\r\n            listOfText.push(\r\n                <div className=\"text\" key={i}>\r\n                    {text}\r\n                </div>\r\n            )\r\n        }\r\n        return listOfText;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"background\">\r\n                {this.renderTextElements('About HTTP', 40)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Background;\r\n","import React, { PureComponent} from 'react';\r\n\r\nimport './SocialLinks.scss';\r\n\r\nclass SocialLinks extends PureComponent {\r\n    SOCIALS = [\r\n        {\r\n            name: 'facebook',\r\n            link: 'https://www.facebook.com/dmalan'\r\n        },\r\n        {\r\n            name: 'vk',\r\n            link: 'https://vk.com/club128825883'\r\n        },\r\n        {\r\n            name: 'instagram',\r\n            link: 'https://www.instagram.com/davidjmalan/',\r\n        },\r\n        {\r\n            name: 'youtube',\r\n            link: 'https://www.youtube.com/watch?v=PUPDGbnpSjw&ab_channel=CS50'\r\n        },\r\n        {\r\n            name: 'twitter',\r\n            link: 'https://twitter.com/davidjmalan'\r\n        }\r\n    ];\r\n\r\n    renderButton = (social) => {\r\n        return (\r\n            <li className={social.name} key={social.name}>\r\n                <a href={social.link}>\r\n                    <i className={`fa fa-${social.name} fa-2x`} aria-hidden=\"true\"/>\r\n                </a>\r\n            </li>\r\n        )\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <ul>\r\n                    {this.SOCIALS.map(this.renderButton)}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SocialLinks;\r\n","import React, { Component } from 'react';\r\nimport './FlipButton.scss';\r\n\r\nclass FlipButton extends Component {\r\n    render() {\r\n        return (\r\n            <a\r\n                target=\"_blank\"\r\n                href=\"https://docs.google.com/forms/d/e/1FAIpQLSdp5a3nkQYFatbaJSV6gM0k6f_g6woWPb2a6G6pHZqMFxJ23A/viewform?entry.13833036=Ivan+Ivanov&entry.633204632=%2B79996845258&entry.2005715100=My+friends+told+me\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                <button className='btn btn-glow'>Sign up for a lecture!</button>\r\n            </a>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FlipButton;","import React, { Component } from 'react';\nimport './App.css';\nimport { Background } from \"./components/Background\";\nimport { SocialLinks } from \"./components/SocialLinks\";\nimport { FlipButton } from \"./components/FlipButton\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Background/>\n                <div className=\"buttons\">\n                    <SocialLinks/>\n                    <FlipButton/>\n                </div>\n                <div className=\"author\">\n                    V. Plokhotnyuk\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}